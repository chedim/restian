/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.onkiup.restian; 
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import com.onkiup.restian.errors.HttpError;
import com.onkiup.restian.errors.NoSuchRoute;
import com.onkiup.restian.errors.Unauthorized;
import com.onkiup.restian.errors.UnsupportedMethod;
import com.onkiup.restian.interfaces.Api;
import com.onkiup.restian.interfaces.AuthValidator;
import com.onkiup.restian.interfaces.Endpoint;
import com.onkiup.restian.interfaces.Entity;
import com.onkiup.restian.interfaces.EntityManager;
import com.onkiup.restian.interfaces.EntityRouter;
import com.onkiup.restian.interfaces.Serializer;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

public class Restian implements HttpHandler {
  private HttpServer server;
  private Set<Api> apis;


  public Restian add(Api api) {
    apis.add(api);
    return this;
  }

  public Restian remove(Api api) {
    apis.remove(api);
    return this;
  }

  @Override
  public void handle(HttpExchange exchange) {
    try {
      Class<? extends Entity> target = null;
      Api api = route(exchange);
      if (api != null) {
        Object response = delegate(api, exchange);
        Serializer serializer = api.serializer();
        serializer.serialize(exchange, response);
      } else {
        throw new NoSuchRoute();
      }
    } catch (HttpError he) {
      // TODO: proper error reporting
      throw new RuntimeException(he);
    }
  }


  private Api route(HttpExchange exchange) {
    String path = exchange.getRequestURI().getPath();
    return apis.stream()
      .filter(api -> path.startsWith(api.baseUrl()))
      .filter(Objects::nonNull)
      .findFirst()
      .orElse(null);
  }

  private Object delegate(Api api, HttpExchange exchange) throws HttpError {
    EntityRouter router = api.router();
    Endpoint target = router.route(exchange);
    Authorization auth = validateAuth(target, exchange);
    EntityManager manager = api.entityManager();


  }


  private Authorization validateAuth(Endpoint target, HttpExchange exchange) throws HttpError {
    Api api = target.owner();
    Class<? extends Entity> model = target.model();
    AuthValidator validator = api.authValidator();
    String method = exchange.getRequestMethod().toLowerCase();
    Authorization auth = null;
    if ("head".equals(method) || "get".equals(method)) {
      auth = validator.read(model, exchange);
    } else if ("put".equals(method) || "post".equals(method)) {
      auth = validator.update(model, exchange);
    } else if ("delete".equals(method)) {
      auth = validator.delete(model, exchange);
    } else {
      throw new UnsupportedMethod();
    }

    if (auth == null) {
      throw new Unauthorized();
    }

    return auth;
  }

}
